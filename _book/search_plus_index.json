{"./":{"url":"./","title":"前言","keywords":"","body":"个人笔记 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 22:18:51 "},"book_list.html":{"url":"book_list.html","title":"目录","keywords":"","body":"目录 Python笔记 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 16:22:38 "},"notes/python/python.html":{"url":"notes/python/python.html","title":"python笔记","keywords":"","body":"Python 笔记 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 17:08:49 "},"notes/python/closure.html":{"url":"notes/python/closure.html","title":"closure(闭包)","keywords":"","body":"闭包、装饰器 闭包 函数中定义新的函数，并且定义的函数使用了外面函数的参数 def fun(num): print(\"fun\") def fun_in(num): print(num+1) return fun_in # 定义直线ax+b def line(a,b): def fun(x): print(a*x+b) return fun # 调用 line1 = line(1,2) # line1相当于fun # 直接多次调用 line1(2) # 结果1x2+2 line1(3) # 结果1x3+2 装饰器 在不改变原来函数的条件下，增加函数的功能 # 原函数f1(),f2()。现增加功能调用前先验证 def f1(): print(\"f1函数\") def f2(): print(\"f2函数\") # 增加功能(使用闭包) def w(func): def inner(): if True: func() # 调用函数 else: pass return inner # 调用原函数 f1 = w(f1) f2 = w(f2) f1() f2() # 函数f1,f2不发生改变，调用方式也不变，但函数功能增加 代码等价与(@语法糖)当代码解释器运行到有装饰器的地方，解释器就开始装饰，而不是等调用的时候在进行装饰。若有多个装饰器，先执行内层的装饰 # 原函数f1(),f2()。现增加功能调用前先验证 @w def f1(): print(\"f1函数\") @w def f2(): print(\"f2函数\") # 增加功能(使用闭包) def w(func): def inner(): print(\"此处验证\") if True: func() # 调用函数 else: pass return inner # 调用原函数 f1() f2() # 函数f1,f2不发生改变，调用方式也不变，但函数功能增加 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-14 17:23:02 "},"notes/git/git.html":{"url":"notes/git/git.html","title":"git笔记","keywords":"","body":"git笔记 git安装 git常用命令 一个简单的demo Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 17:12:09 "},"notes/git/install.html":{"url":"notes/git/install.html","title":"git安装","keywords":"","body":"git安装、简单的配置(Linux) git安装 apt包管理安装 sudo apt-get install git yum命令编译安装 官网下载源码 解压 编译安装(安装前要先安装依赖包) yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker make prefix=/usr/local/git all make prefix=/usr/local/git install git简单配置(用户、邮箱的配置) username git config --global user.name \"lsxg\" email git config --global user.email \"lsxg@qq.com\" 配置环境变量 vim /etc/profile 加入export PATH=$PATH:/usr/local/git/bin 生效配置文件 source /etc/profile Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 18:40:07 "},"notes/git/command.html":{"url":"notes/git/command.html","title":"git常用命令","keywords":"","body":"git常用命令 基本命令 显示git --help命令 git --help 查看git当前的状态 git status 查看版本 git --version git创建项目1 初始化git项目 git init 给项目建分支加仓库地址 git remote add origin url git创建项目2 克隆项目 git clone url 提交推送 git暂存(.所有) git add . 添加提交日志 git commit -m \"info\" 推送到远程仓库 git push origin master 拉取 git pull origin master Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 18:58:47 "},"notes/git/demo.html":{"url":"notes/git/demo.html","title":"git演示","keywords":"","body":"一个简单的演示（码云） 先在码云上创建一个项目 初始化git项目 git init 建立git分支 分支名：origin(自取) url:在码云上创建的项目url git remote add origin url 把本地文件加到git仓库 git add . 加commit信息 git commit -m \"info\" 推送 git push origin master 注意:如果你使用了git init然后又使用git clone url提交的时候会提示仓库不可用 (使用git init 命令后会在当前目录下创建一个 .git 文件，再使用git clone url 会在当前目录下新建一个含有 .git 的文件夹，所以相当于使用git init创建的 .git 没有仓库) 注意:如果直接push也可能报错，你就要先pull一下，解除冲突，再强行push git pull origin master git push -u origin master Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 14:46:50 "},"notes/gitbook/gitbook.html":{"url":"notes/gitbook/gitbook.html","title":"gitbook笔记","keywords":"","body":"gitbook笔记 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 20:30:38 "},"notes/gitbook/install.html":{"url":"notes/gitbook/install.html","title":"安装","keywords":"","body":"gitbook、nodejs安装(linux) 安装nodejs 安装gitbook前要安装nodejs(nodejs 下的 NPM（node package manager），通常称为 node 包管理器。使用 NPM 可以对 node 包进行安装、卸载、更新、查看、搜索、发布等操作。) 官网下载对应版本的压缩包 解压 tar -xvf node-v6.10.0-linux-x64.tar.xz 将解压的文件放到你想要的文件夹，也可以直接放着。 设置node和npm为全局变量 ln -s /home/download/node-v8.3.0-linux-x64/bin/node /usr/local/bin/node ln -s /home/download/node-v8.3.0-linux-x64/bin/npm /usr/local/bin/npm 测试是否安装成功(输入命令) node -v npm -v 安装gitbook 终端运行命令 sudo npm install gitbook-cli -g Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 19:59:29 "},"notes/gitbook/command.html":{"url":"notes/gitbook/command.html","title":"开始使用","keywords":"","body":"开始使用gitbook(介绍一些简单的命令) 查看版本 gitbook --version 更新 npm update gitbook-cli -g 卸载 sudo npm uninstall gitbook-cli -g 开始使用 初始化(进入要创建gitbook的目录) gitbook init 启动服务 gitbook serve 预览，在浏览器输入地址(http://localhost:4000/) Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 20:13:28 "},"notes/gitbook/book.json.html":{"url":"notes/gitbook/book.json.html","title":"插件安装","keywords":"","body":"book.json文件(配置、插件安装) book.json文件是相关的配置文件 expandable-chapters(章节目录插件) { \"plugins\":[ \"tbfed-pagefooter\", ], \"pluginsConfig\":{ \"expandable-chapters\":{} } } 然后执行命令 gitbook install Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 20:29:35 "},"notes/markdown/markdown.html":{"url":"notes/markdown/markdown.html","title":"Markdown笔记","keywords":"","body":"markdown笔记 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 22:31:24 "},"notes/markdown/format.html":{"url":"notes/markdown/format.html","title":"格式","keywords":"","body":"mark格式 换行 使用 末尾加两个以上空格 回车 插入代码 使用`````` Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 23:08:06 "},"notes/markdown/demo.html":{"url":"notes/markdown/demo.html","title":"demo","keywords":"","body":"一级标题 二级标题 六级标题 斜体 粗体 粗斜体 分割线 有序列表 列表1 列表2 列表3 无序列表 11 11 11 22 22 22 代码块 daimakuai djiejicjxmdk 插入图片 在后面解释1: 插入链接 lianjie [链接]（https://www.baidu.com/） 链接2 Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-13 22:59:08 "},"about.html":{"url":"about.html","title":"关于作者","keywords":"","body":"Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-12 16:16:51 "},"notes/python/sundry.html":{"url":"notes/python/sundry.html","title":"杂项","keywords":"","body":"杂项 Python可以直接对函数换名 def fun(): print('this is funnction') return a=fun a() # 等价与 fun() 如果函数重名编译不报错，调用默认执行最后一次申明时的内容(要避免函数重名问题) 在不引入其他变量的情况下，交换两个变量的值 # 只有Python可以 a,b = b,a 适合所以语言 a = a+b; b = a-b; a = a-b; Copyright 2018 Book_note all right reserved，powered by Gitbook该文件修订时间: 2018-06-14 17:36:41 "}}